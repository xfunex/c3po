#!/usr/bin/python
import warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
import xmpp
from mulib import mu
from eventlet import api, httpd
warnings.resetwarnings()
from rdflib import URIRef, Namespace, Variable
from rdflib.Graph import Graph
from twisted.python.util import sibpath

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
SMS = Namespace("http://bigasterisk.com/ns/sms/")

import smtplib
from email.mime.text import MIMEText

class FoafStore(object):
    """all the getters assume that if we don't know anything about
    your user URI, then you must have passed the right return value
    for the method"""

    def __init__(self, store):
        self.graph = Graph()
        self.graph.parse(store, format="n3")

    def getEmail(self, user):
        return self.graph.value(URIRef(user), FOAF.mbox, default=user)

    def getJid(self, user):
        return self.graph.value(URIRef(user), FOAF.jabberID, default=user)

    def getSms(self, user):
        """the email address to the SMS gateway for this user's phone.

        I'm looking for this pattern in the RDF store:

            ?user foaf:phone <tel:+555-555-5555> .
            <tel:+555-555-5555> sms:gateway ?gateway .
            ?gateway sms:addressFormat "n@example.com" .

        See http://www.mutube.com/projects/open-email-to-sms/gateway-list/
        for the formats.
        """

        try:
            rows = list(self.graph.query(
                """SELECT ?n ?format WHERE {
                     ?user foaf:phone ?n .
                     ?n sms:gateway [ sms:addressFormat ?format ] .
                   }""",
                initBindings={Variable("user") : URIRef(user)},
                initNs=dict(foaf=FOAF, sms=SMS)))
            if not rows:
                raise ValueError("no sms gateway found for %s" % user)

            addr1, addr2 = rows[0][1].split('@')
            n = rows[0][0]
            if not n.startswith("tel:"):
                raise ValueError("unknown phone uri %r" % n)
            n = n[4:].replace('+','').replace('-', '')
            addr = addr1.replace('n', n) + '@' + addr2
        except ValueError:
            addr = user
            
        return addr

# move this data to the account store
class Bot(object):
    smtpHost = 'bigasterisk.com'
    senderEmail = 'drewp@bigasterisk.com'
    jid = "house@jabber.bigasterisk.com"
    jabberHost = 'jabber.bigasterisk.com'
    jabberPassword = open("house-jabber-password").read().strip()

def emailMsg(foaf, to, msg, from_=None):
    if from_ is None:
        from_ = Bot.senderEmail
        
    m = MIMEText(msg)
    m['From'] = from_
    m['To'] = foaf.getEmail(to)

    mailServer = smtplib.SMTP(Bot.smtpHost)
    mailServer.sendmail(Bot.senderEmail, [m['To']], m.as_string())
    mailServer.quit()

    return "Mailed %s" % m['To']

def smsMsg(foaf, to, msg):
    # on palm pre, the sender takes up most of the notification
    # space. So let's put our message in the sender spot! not working yet
    num = foaf.getSms(to)
    emailMsg(foaf, num, msg,
             from_='c3po',
             #from_='"%s"' % msg.replace('"', '\\"') #?
             )
    return "Sent to %s" % num

def xmppMsg(foaf, to, msg):
    jid=xmpp.protocol.JID(Bot.jid)
    cl=xmpp.Client(jid.getDomain(),debug=[])

    # sometimes the next call just prints (!) 'An error occurred while
    # looking up _xmpp-client._tcp.{something.com}'. Then we return
    # successful, even though the connect failed :(
    if not cl.connect((Bot.jabberHost, 5222)):
        raise IOError('Can not connect to server.')
    if not cl.auth(jid.getNode(), Bot.jabberPassword):
        raise IOError('Can not auth with server.')

    cl.send(xmpp.Message(foaf.getJid(to), msg, typ='chat'))
    cl.disconnect()
    return "Jabbered %s" % to

class Root(mu.Resource):
    def __init__(self, foaf):
        self.foaf = foaf
        
    def handle_get(self, req):
        req.write('''<html><body>
        <form method="post" action="">
            <div>User address or URI: <input name="user"/></div>
            <div>Message: <input name="msg"/></div>
            <div>Preferred mode:
            <select name="mode">
                <option>xmpp</option>
                <option>email</option>
                <option>sms</option>
            </select></div>
            <div><input type="submit"/></div>
        </form>
        </body></html>
        ''')
        
    def handle_post(self, req):
        user = req.get_arg('user')
        msg = req.get_arg('msg')
        mode = req.get_arg('mode')
        if not user or not msg or not mode:
            raise ValueError("missing user, msg, or mode")

        func = {'email' : emailMsg,
                'xmpp' :  xmppMsg,
                'sms' : smsMsg}[mode]
        req.write(func(foaf, user, msg))
 
if __name__ == "__main__":
    foaf = FoafStore(sibpath(__file__, 'accounts.n3'))
    root = Root(foaf)
    httpd.server(api.tcp_listener(('0.0.0.0', 9040)), mu.SiteMap(root))
